"use strict";define("VC/Common",["require","exports","VSS/Platform/Feature","VSS/Platform/Context","VSS/Platform/Location","react","VSS/Platform/FPS","VSS/Legacy/Legacy","VSS/Core/Observable","VSS/Platform/RestClientBase","VSS/Platform/Util/Serialization","Favorites/Picker/ArtifactPickerProvider","VSS/Core/Util/String","VSSUI/Utilities/Date","VSSUI/Util","VSS/Platform/Layout","VSSUI/PickList","VSS/Features/PlatformUI/ContributedMenu","VSS/Features/Frame/CommandBar","VSSUI/Observer","VSS/Core/Util/Object","VSSUI/Spinner"],function(e,t,s,r,o,i,a,n,p,c,u,l,d,m,h,g,y,R,I,v,f,q){var C,b,T,V,P,j,S,w,_,k,x,N,D,F;C=t.Resources={},Object.defineProperty(t,"__esModule",{value:!0}),t.Resources.VersionDropdown_PivotBranches="Branches",t.Resources.VersionDropdown_PivotTags="Tags",t.Resources.VersionDropdown_PivotCommits="Commits",t.Resources.VersionDropdown_MineBranches="Mine",t.Resources.VersionDropdown_AllBranches="All",t.Resources.VersionDropdown_TagsNoItemsText="No tags in this repository",t.Resources.VersionDropdown_BranchesSearchTextPlaceholder="Filter branches",t.Resources.VersionDropdown_TagsSearchTextPlaceholder="Filter tags",t.Resources.VersionDropdown_CommitsSearchTextPlaceholder="Search commits",t.Resources.VersionDropdown_BranchesSearchNoResultsText="No branches matched '{0}'",t.Resources.VersionDropdown_TagsSearchNoResultsText="No tags matched '{0}'",t.Resources.VersionDropdown_CommitsSearchNoResultsText="No commits matched '{0}'",t.Resources.VersionDropdown_CommitsSearchMinimumCharactersError="Enter first 4 characters of a commit ID",t.Resources.VersionDropdown_CommitsSearchWrongCharactersError="Commit IDs must be hex digits (0-9 and a-f)",t.Resources.VersionDropdown_NewBranch="New branch",t.Resources.VersionDropdown_ClearSelection="Clear selection",t.Resources.VersionDropdown_DefaultBadge="Default",t.Resources.ManageRepositories="Manage repositories",t.Resources.SearchRepositoriesWatermark="Filter repositories",t.Resources.ImportRepository="Import repository",t.Resources.NewRepository="New repository",t.Resources.NewPullRequest="New pull request",b=t.ContractsConstants={},Object.defineProperty(t,"__esModule",{value:!0}),(D=t.ContractsConstants.GitConstants||(t.ContractsConstants.GitConstants={})).GitSecurityNamespaceId="2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87",D.SecurableRoot="repoV2/",D.GitToolName="Git",t.ContractsConstants.VersionControlArea="VersionControl",function(e){t.ContractsEnumToString={},Object.defineProperty(t,"__esModule",{value:!0}),t.ContractsEnumToString.pullRequestStatusToString=function(e){switch(e){case 2:return"Abandoned";case 4:return"All";case 3:return"Completed";default:return"Active"}}}(),T=t.Helpers={},Object.defineProperty(t,"__esModule",{value:!0}),(F=t.Helpers.BranchName||(t.Helpers.BranchName={})).getHeadRelativeName=function(e){return e.substring(e.indexOf("/",e.indexOf("/")+1)+1)},F.getParentName=function(e){return e.substring(0,e.lastIndexOf("/"))},F.getShortName=function(e){return e.substring(e.lastIndexOf("/")+1)},function(e){const t="WebAccess.RepositoryOverview.Enable";e.isRepositoryOverviewHubEnabled=function(e){return s.isFeatureFlagEnabled(e,t,!1)}}(t.Helpers.FeatureFlags||(t.Helpers.FeatureFlags={})),function(e){var s;t.Navigation={},Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Branches="ms.vss-code-web.branches-route",e.Changeset="ms.vss-code-web.changeset-route",e.Commit="ms.vss-code-web.commit-route",e.Commits="ms.vss-code-web.commits-route",e.Shelveset="ms.vss-code-web.shelveset-route",e.TfvcFiles="ms.vss-code-web.files-route-tfvc",e.GitFiles="ms.vss-code-web.files-route-git",e.Pushes="ms.vss-code-web.pushes-route",e.Tags="ms.vss-code-web.tags-route",e.PullRequests="ms.vss-code-web.pull-request-list-route",e.PullRequest="ms.vss-code-web.pull-request-review-route",e.MyPullRequests="ms.vss-code-web.my-pullrequests-me-page-route",e.GitOverview="ms.vss-code-web.repository-overview-git-route",e.TfvcOverview="ms.vss-code-web.repository-overview-tfvc-route"}(s=t.Navigation.RouteIds||(t.Navigation.RouteIds={}));const i={"ms.vss-code-web.git-repository-overview":s.GitOverview,"ms.vss-code-web.files-hub-git":s.GitFiles,"ms.vss-code-web.branches-hub":s.Branches,"ms.vss-code-web.tags-hub":s.Tags,"ms.vss-code-web.pushes-hub":s.Pushes,"ms.vss-code-web.commits-hub":s.Commits,"ms.vss-code-web.pull-request-hub":s.PullRequests};r.Services.add("IVCNavigationService",{serviceFactory:class extends r.VssService{getData(){return this.pageContext.getService("IVssContributionService").getData("ms.vss-code-web.navigation-data-provider")}getTfvcCommitUrl(e,t,r){const i={};this._addDefaultRoutes(i,t,r);let a="";return e.startsWith("C")?(a=s.Changeset,i.parameters=encodeURIComponent(e.substring(1))):(a=s.Shelveset,i.ss=e),o.routeUrl(this.pageContext,a,i)}getGitCommitUrl(e,t,r,i){const a={};return this._addDefaultRoutes(a,r,i),t&&(a["vc.GitRepositoryName"]=t),a.parameters=encodeURIComponent(e),o.routeUrl(this.pageContext,s.Commit,a)}getRepositoryUrl(e,t,r,a,n){if(!a)if(e){const e=this.pageContext.getService("IVssNavigationService").getDisplayedNavigation()[3];a=i[e]||s.GitFiles}else a=s.TfvcFiles;let p={};return this._addDefaultRoutes(p,t,r),e&&(p["vc.GitRepositoryName"]=e),n&&(p=Object.assign({},n,p)),o.routeUrl(this.pageContext,a,p)}getPullRequestUrl(e,t,r){const i={};return this._addDefaultRoutes(i,r,null),t&&(i["vc.GitRepositoryName"]=t),i.parameters=e.toString(),o.routeUrl(this.pageContext,s.PullRequest,i)}getGitCompareCommitsUrl(e,t,r,i,a){let n={};return this._addDefaultRoutes(n,i,a),r&&(n["vc.GitRepositoryName"]=r),n.baseVersion="GC"+e,n.targetVersion="GC"+t,n._a="commits",o.routeUrl(this.pageContext,s.Branches,n)}getRefUrl(e,t,r,i){let a=s.GitFiles;t||(a=s.TfvcFiles);let n={};return this._addDefaultRoutes(n,r,i),t&&(n["vc.GitRepositoryName"]=t),0===e.indexOf("refs/heads/")?n.version="GB"+e.substring("refs/heads/".length):(a=s.TfvcFiles)&&(n.path=e),o.routeUrl(this.pageContext,a,n)}getMyPullRequestsUrl(){return o.routeUrl(this.pageContext,s.MyPullRequests)}_addDefaultRoutes(e,t,s){if(!t||!s){const e=this.pageContext.getService("ITfsPageService").getData(),s=e&&e.project&&e.project.name;void 0===t&&s&&(t=s)}t&&(e.project=t),s&&(e.team=s)}}})}(),function(e){t.CreateMenuProvider={},Object.defineProperty(t,"__esModule",{value:!0});r.Services.add("code-create-menu-provider",{serviceFactory:class extends r.VssService{constructor(){super(...arguments),this.menuItems=[],this.createRepository=(()=>{this.pageContext.getService("IVssLayoutManager").renderCallout(e=>i.createElement(n.LegacyComponent,{modules:["VersionControl/Scripts/Components/HeaderComponents/HeaderComponents"],wrappedType:"newRepositoryDialog",onClose:()=>{e()},isOverviewHubEnabled:T.FeatureFlags.isRepositoryOverviewHubEnabled(this.pageContext)},null))})}_serviceStart(e){super._serviceStart(e);const t=this.pageContext.getService("IVCNavigationService").getData();if(t){const e=this.pageContext.getService("ITfsPageService").getData();if(e&&e.project){const s={};s.project=e.project.name,t.defaultGitRepoName&&(t.defaultGitRepoName!==e.project.name&&(s["vc.GitRepositoryName"]=t.defaultGitRepoName),this.menuItems.push({groupKey:"vc-actions",href:o.routeUrl(this.pageContext,"ms.vss-code-web.pull-request-create-route",s),iconProps:{iconName:"BranchPullRequest"},id:"vcNewPr",onActivate:(e,t)=>a.onClickFPS(this.pageContext,e.href,!0,t),rank:100,text:C.NewPullRequest})),this.menuItems.push({groupKey:"vc-actions",id:"vcNewRepo",onActivate:this.createRepository,rank:100,text:C.NewRepository})}}}getMenuItems(e){return"ms.vss-tfs-web.vertical-header-create-menu"===e?this.menuItems:null}}})}(),function(e){t.FluxAction={},Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this._listeners=[]}invoke(e){if(s.s_executing)throw new Error("Cannot invoke an action from inside another action.");s.s_executing=!0;try{this._listeners.forEach(t=>{t(e)})}finally{s.s_executing=!1}}addListener(e,t){let s=t?e.bind(t):e;return this._listeners.push(s),s}removeListener(e){let t=this._listeners.indexOf(e);t>=0&&this._listeners.splice(t,1)}}s.s_executing=!1,t.FluxAction.Action=s}(),function(e){t.FluxStore={},Object.defineProperty(t,"__esModule",{value:!0});t.FluxStore.Store=class{constructor(){this.observable=new p.Observable}subscribe(e){this.observable.subscribe(e,void 0)}unsubscribe(e){this.observable.unsubscribe(e,void 0)}_emitChanged(){this.observable.notify(void 0,"emitChanged")}}}(),function(e){t[e]={},Object.defineProperty(t,"__esModule",{value:!0});t[e].GitClientName="IGitRestClient",t[e].getGitClient=function(s,r){return s.getRestClient(t[e].GitClientName,r)},r.RestClients.add(t[e].GitClientName,{factory:class extends c.RestClientBase{constructor(e){super(e)}async createAnnotatedTag(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/annotatedTags/{objectId}",routeValues:{project:t,repositoryId:s},body:e})}async getAnnotatedTag(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/annotatedTags/{objectId}",routeValues:{project:e,repositoryId:t,objectId:s}})}async getBlob(e,t,s,r,o,i){const a={download:r,fileName:o,resolveLfs:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:s,repositoryId:e,sha1:t},queryParams:a})}async getBlobContent(e,t,s,r,o,i){const a={download:r,fileName:o,resolveLfs:i};return this.beginRequest({apiVersion:"5.0",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:s,repositoryId:e,sha1:t},queryParams:a})}async getBlobsZip(e,t,s,r){const o={filename:r};return this.beginRequest({apiVersion:"5.0",method:"POST",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:s,repositoryId:t},queryParams:o,body:e})}async getBlobZip(e,t,s,r,o,i){const a={download:r,fileName:o,resolveLfs:i};return this.beginRequest({apiVersion:"5.0",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:s,repositoryId:e,sha1:t},queryParams:a})}async getBranch(e,t,s,r){const o={name:t,baseVersionDescriptor:r};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/stats/branches",routeValues:{project:s,repositoryId:e},queryParams:o})}async getBranches(e,t,s){const r={baseVersionDescriptor:s};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/stats/branches",routeValues:{project:t,repositoryId:e},queryParams:r})}async getBranchStatsBatch(e,t,s){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/stats/branches",routeValues:{project:s,repositoryId:t},body:e})}async getChanges(e,t,s,r,o){const i={top:r,skip:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/Changes",routeValues:{project:s,commitId:e,repositoryId:t},queryParams:i})}async getCherryPickRelationships(e,t,s,r){const o={includeLinks:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/cherryPickRelationships/{commitId}",routeValues:{project:s,repositoryNameOrId:e,commitId:t},queryParams:o})}async createCherryPick(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}",routeValues:{project:t,repositoryId:s},body:e})}async getCherryPick(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}",routeValues:{project:e,cherryPickId:t,repositoryId:s}})}async getCherryPickForRefName(e,t,s){const r={refName:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}",routeValues:{project:e,repositoryId:t},queryParams:r})}async getCommitDiffs(e,t,s,r,o,i,a){const n={diffCommonCommit:s,$top:r,$skip:o,baseVersionDescriptor:i,targetVersionDescriptor:a};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/diffs/commits",routeValues:{project:t,repositoryId:e},queryParams:n})}async getCommit(e,t,s,r){const o={changeCount:r};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Commits/{commitId}",routeValues:{project:s,commitId:e,repositoryId:t},queryParams:o})}async getCommits(e,t,s,r,o){const i={searchCriteria:t,$skip:r,$top:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Commits/{commitId}",routeValues:{project:s,repositoryId:e},queryParams:i})}async getPushCommits(e,t,s,r,o,i){const a={pushId:t,top:r,skip:o,includeLinks:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Commits/{commitId}",routeValues:{project:s,repositoryId:e},queryParams:a})}async getCommitsBatch(e,t,s,r,o,i){const a={$skip:r,$top:o,includeStatuses:i};return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/CommitsBatch",routeValues:{project:s,repositoryId:t},queryParams:a,body:e})}async getDeletedRepositories(e){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/DeletedRepositories",routeValues:{project:e}})}async getFileDiffs(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/FileDiffs",routeValues:{project:t,repositoryId:s},body:e})}async getForks(e,t,s,r){const o={includeLinks:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forks/{collectionId}",routeValues:{project:s,repositoryNameOrId:e,collectionId:t},queryParams:o})}async createForkSyncRequest(e,t,s,r){const o={includeLinks:r};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}",routeValues:{project:s,repositoryNameOrId:t},queryParams:o,body:e})}async getForkSyncRequest(e,t,s,r){const o={includeLinks:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}",routeValues:{project:s,repositoryNameOrId:e,forkSyncOperationId:t},queryParams:o})}async getForkSyncRequests(e,t,s,r){const o={includeAbandoned:s,includeLinks:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}",routeValues:{project:t,repositoryNameOrId:e},queryParams:o})}async createImportRequest(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:t,repositoryId:s},body:e})}async getImportRequest(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:e,repositoryId:t,importRequestId:s}})}async queryImportRequests(e,t,s){const r={includeAbandoned:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:e,repositoryId:t},queryParams:r})}async updateImportRequest(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:t,repositoryId:s,importRequestId:r},body:e})}async getItem(e,t,s,r,o,i,a,n,p,c,u){const l={path:t,scopePath:r,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:s,repositoryId:e},queryParams:l})}async getItemContent(e,t,s,r,o,i,a,n,p,c,u){const l={path:t,scopePath:r,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u};return this.beginRequest({apiVersion:"5.0",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:s,repositoryId:e},queryParams:l})}async getItems(e,t,s,r,o,i,a,n,p){const c={scopePath:s,recursionLevel:r,includeContentMetadata:o,latestProcessedChange:i,download:a,includeLinks:n,versionDescriptor:p};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:t,repositoryId:e},queryParams:c})}async getItemText(e,t,s,r,o,i,a,n,p,c,u){const l={path:t,scopePath:r,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u};return this.beginRequest({apiVersion:"5.0",httpResponseType:"text/plain",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:s,repositoryId:e},queryParams:l})}async getItemZip(e,t,s,r,o,i,a,n,p,c,u){const l={path:t,scopePath:r,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u};return this.beginRequest({apiVersion:"5.0",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:s,repositoryId:e},queryParams:l})}async getItemsBatch(e,t,s){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/ItemsBatch",routeValues:{project:s,repositoryId:t},body:e})}async getMergeBases(e,t,s,r,o,i){const a={otherCommitId:s,otherCollectionId:o,otherRepositoryId:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/commits/{commitId}/mergeBases",routeValues:{project:r,repositoryNameOrId:e,commitId:t},queryParams:a})}async createMergeRequest(e,t,s,r){const o={includeLinks:r};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/merges/{mergeOperationId}",routeValues:{project:t,repositoryNameOrId:s},queryParams:o,body:e})}async getMergeRequest(e,t,s,r){const o={includeLinks:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/merges/{mergeOperationId}",routeValues:{project:e,repositoryNameOrId:t,mergeOperationId:s},queryParams:o})}async getPolicyConfigurations(e,t,s,r,o,i){const a={repositoryId:t,refName:s,policyType:r,$top:o,continuationToken:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/policy/configurations",routeValues:{project:e},queryParams:a,returnRawResponse:!0}).then(async e=>({policyConfigurations:await e.text().then(u.deserializeVssJsonObject),continuationToken:e.headers.get("x-ms-continuationtoken")}))}async createAttachment(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:o,fileName:t,repositoryId:s,pullRequestId:r},customHeaders:{"Content-Type":"application/octet-stream"},body:e,isRawData:!0})}async deleteAttachment(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:r,fileName:e,repositoryId:t,pullRequestId:s}})}async getAttachmentContent(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:r,fileName:e,repositoryId:t,pullRequestId:s}})}async getAttachments(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:s,repositoryId:e,pullRequestId:t}})}async getAttachmentZip(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:r,fileName:e,repositoryId:t,pullRequestId:s}})}async createLike(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:s,commentId:r}})}async deleteLike(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:s,commentId:r}})}async getLikes(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:s,commentId:r}})}async getPullRequestIterationCommits(e,t,s,r,o,i){const a={top:o,skip:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/commits",routeValues:{project:r,repositoryId:e,pullRequestId:t,iterationId:s},queryParams:a})}async getPullRequestCommits(e,t,s){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/commits",routeValues:{project:s,repositoryId:e,pullRequestId:t}})}async getPullRequestConflict(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,conflictId:s}})}async getPullRequestConflicts(e,t,s,r,o,i,a,n){const p={$skip:r,$top:o,includeObsolete:i,excludeResolved:a,onlyResolved:n};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:s,repositoryId:e,pullRequestId:t},queryParams:p})}async updatePullRequestConflict(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:o,repositoryId:t,pullRequestId:s,conflictId:r},body:e})}async updatePullRequestConflicts(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:r,repositoryId:t,pullRequestId:s},body:e})}async getPullRequestIterationChanges(e,t,s,r,o,i,a){const n={$top:o,$skip:i,$compareTo:a};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/changes",routeValues:{project:r,repositoryId:e,pullRequestId:t,iterationId:s},queryParams:n})}async getPullRequestIteration(e,t,s,r){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,iterationId:s}})}async getPullRequestIterations(e,t,s,r){const o={includeCommits:r};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}",routeValues:{project:s,repositoryId:e,pullRequestId:t},queryParams:o})}async createPullRequestIterationStatus(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:t,pullRequestId:s,iterationId:r},body:e})}async deletePullRequestIterationStatus(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,iterationId:s,statusId:r}})}async getPullRequestIterationStatus(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,iterationId:s,statusId:r}})}async getPullRequestIterationStatuses(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,iterationId:s}})}async updatePullRequestIterationStatuses(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:t,pullRequestId:s,iterationId:r},customHeaders:{"Content-Type":"application/json-patch+json"},body:e})}async createPullRequestLabel(e,t,s,r,o){const i={projectId:o};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:r,repositoryId:t,pullRequestId:s},queryParams:i,body:e})}async deletePullRequestLabels(e,t,s,r,o){const i={projectId:o};return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:r,repositoryId:e,pullRequestId:t,labelIdOrName:s},queryParams:i})}async getPullRequestLabel(e,t,s,r,o){const i={projectId:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:r,repositoryId:e,pullRequestId:t,labelIdOrName:s},queryParams:i})}async getPullRequestLabels(e,t,s,r){const o={projectId:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:s,repositoryId:e,pullRequestId:t},queryParams:o})}async getPullRequestProperties(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/properties",routeValues:{project:s,repositoryId:e,pullRequestId:t}})}async updatePullRequestProperties(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/properties",routeValues:{project:r,repositoryId:t,pullRequestId:s},customHeaders:{"Content-Type":"application/json-patch+json"},body:e})}async getPullRequestQuery(e,t,s){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/PullRequestQuery",routeValues:{project:s,repositoryId:t},body:e})}async createPullRequestReviewer(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0",method:"PUT",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:o,repositoryId:t,pullRequestId:s,reviewerId:r},body:e})}async createPullRequestReviewers(e,t,s,r){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:r,repositoryId:t,pullRequestId:s},body:e})}async deletePullRequestReviewer(e,t,s,r){return this.beginRequest({apiVersion:"5.0",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,reviewerId:s}})}async getPullRequestReviewer(e,t,s,r){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,reviewerId:s}})}async getPullRequestReviewers(e,t,s){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:s,repositoryId:e,pullRequestId:t}})}async updatePullRequestReviewers(e,t,s,r){return this.beginRequest({apiVersion:"5.0",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:r,repositoryId:t,pullRequestId:s},body:e})}async getPullRequestById(e,t){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/pullRequests/{pullRequestId}",routeValues:{project:t,pullRequestId:e}})}async getPullRequestsByProject(e,t,s,r,o){const i={searchCriteria:t,maxCommentLength:s,$skip:r,$top:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/pullRequests",routeValues:{project:e},queryParams:i})}async createPullRequest(e,t,s,r){const o={supportsIterations:r};return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:s,repositoryId:t},queryParams:o,body:e})}async getPullRequest(e,t,s,r,o,i,a,n){const p={maxCommentLength:r,$skip:o,$top:i,includeCommits:a,includeWorkItemRefs:n};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:s,repositoryId:e,pullRequestId:t},queryParams:p})}async getPullRequests(e,t,s,r,o,i){const a={searchCriteria:t,maxCommentLength:r,$skip:o,$top:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:s,repositoryId:e},queryParams:a})}async updatePullRequest(e,t,s,r){return this.beginRequest({apiVersion:"5.0",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:r,repositoryId:t,pullRequestId:s},body:e})}async sharePullRequest(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/share",routeValues:{project:r,repositoryId:t,pullRequestId:s},body:e})}async createPullRequestStatus(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:r,repositoryId:t,pullRequestId:s},body:e})}async deletePullRequestStatus(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,statusId:s}})}async getPullRequestStatus(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,statusId:s}})}async getPullRequestStatuses(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:s,repositoryId:e,pullRequestId:t}})}async updatePullRequestStatuses(e,t,s,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:r,repositoryId:t,pullRequestId:s},customHeaders:{"Content-Type":"application/json-patch+json"},body:e})}async createComment(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:o,repositoryId:t,pullRequestId:s,threadId:r},body:e})}async deleteComment(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:s,commentId:r}})}async getComment(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:s,commentId:r}})}async getComments(e,t,s,r){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,threadId:s}})}async updateComment(e,t,s,r,o,i){return this.beginRequest({apiVersion:"5.0",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:i,repositoryId:t,pullRequestId:s,threadId:r,commentId:o},body:e})}async createThread(e,t,s,r){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:r,repositoryId:t,pullRequestId:s},body:e})}async getPullRequestThread(e,t,s,r,o,i){const a={$iteration:o,$baseIteration:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:r,repositoryId:e,pullRequestId:t,threadId:s},queryParams:a})}async getThreads(e,t,s,r,o){const i={$iteration:r,$baseIteration:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:s,repositoryId:e,pullRequestId:t},queryParams:i})}async updateThread(e,t,s,r,o){return this.beginRequest({apiVersion:"5.0",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:o,repositoryId:t,pullRequestId:s,threadId:r},body:e})}async getPullRequestWorkItemRefs(e,t,s){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/workitems",routeValues:{project:s,repositoryId:e,pullRequestId:t}})}async createPush(e,t,s){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}",routeValues:{project:s,repositoryId:t},body:e})}async getPush(e,t,s,r,o){const i={includeCommits:r,includeRefUpdates:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}",routeValues:{project:s,repositoryId:e,pushId:t},queryParams:i})}async getPushes(e,t,s,r,o){const i={$skip:s,$top:r,searchCriteria:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}",routeValues:{project:t,repositoryId:e},queryParams:i})}async deleteRepositoryFromRecycleBin(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/recycleBin/repositories/{repositoryId}",routeValues:{project:e,repositoryId:t}})}async getRecycleBinRepositories(e){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/recycleBin/repositories/{repositoryId}",routeValues:{project:e}})}async restoreRepositoryFromRecycleBin(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/recycleBin/repositories/{repositoryId}",routeValues:{project:t,repositoryId:s},body:e})}async getRefs(e,t,s,r,o,i,a,n,p){const c={filter:s,includeLinks:r,includeStatuses:o,includeMyBranches:i,latestStatusesOnly:a,peelTags:n,filterContains:p};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:t,repositoryId:e},queryParams:c})}async updateRef(e,t,s,r,o){const i={filter:s,projectId:o};return this.beginRequest({apiVersion:"5.0",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:r,repositoryId:t},queryParams:i,body:e})}async updateRefs(e,t,s,r){const o={projectId:r};return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:s,repositoryId:t},queryParams:o,body:e})}async createFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:t},body:e})}async deleteRefFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e,favoriteId:t}})}async getRefFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e,favoriteId:t}})}async getRefFavorites(e,t,s){const r={repositoryId:t,identityId:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e},queryParams:r})}async createRepository(e,t,s){const r={sourceRef:s};return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:t},queryParams:r,body:e})}async deleteRepository(e,t){return this.beginRequest({apiVersion:"5.0",method:"DELETE",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:t,repositoryId:e}})}async getRepositories(e,t,s,r){const o={includeLinks:t,includeAllUrls:s,includeHidden:r};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:e},queryParams:o})}async getRepository(e,t){return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:t,repositoryId:e}})}async getRepositoryWithParent(e,t,s){const r={includeParent:t};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:s,repositoryId:e},queryParams:r})}async updateRepository(e,t,s){return this.beginRequest({apiVersion:"5.0",method:"PATCH",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:s,repositoryId:t},body:e})}async createRevert(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}",routeValues:{project:t,repositoryId:s},body:e})}async getRevert(e,t,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}",routeValues:{project:e,revertId:t,repositoryId:s}})}async getRevertForRefName(e,t,s){const r={refName:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}",routeValues:{project:e,repositoryId:t},queryParams:r})}async createCommitStatus(e,t,s,r){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/Statuses",routeValues:{project:r,commitId:t,repositoryId:s},body:e})}async getStatuses(e,t,s,r,o,i){const a={top:r,skip:o,latestOnly:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/Statuses",routeValues:{project:s,commitId:e,repositoryId:t},queryParams:a})}async getSuggestions(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/suggestions",routeValues:{project:t,repositoryId:e}})}async getTreeDiffs(e,t,s,r,o,i){const a={baseId:s,targetId:r,$top:o,continuationToken:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/diffs/trees",routeValues:{project:e,repositoryId:t},queryParams:a,returnRawResponse:!0}).then(async e=>{const t=await e.text().then(u.deserializeVssJsonObject),s=e.headers.get("x-ms-continuationtoken");return{treeDiff:t,continuationToken:s?s.split(","):[]}})}async getTree(e,t,s,r,o,i){const a={projectId:r,recursive:o,fileName:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Trees/{sha1}",routeValues:{project:s,repositoryId:e,sha1:t},queryParams:a})}async getTreeZip(e,t,s,r,o,i){const a={projectId:r,recursive:o,fileName:i};return this.beginRequest({apiVersion:"5.0",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Trees/{sha1}",routeValues:{project:s,repositoryId:e,sha1:t},queryParams:a})}},options:{resourceAreaId:"4e080c62-fa21-4fbc-8fef-2a10a2b38049",serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}("RestClientGit"),function(e){V=t.UtilsRef={},Object.defineProperty(t,"__esModule",{value:!0});const s="refs/heads/",r="refs/tags/";function o(e){return 0===(e||"").indexOf(s)}function i(e){return 0===(e||"").indexOf(r)}t.UtilsRef.getFriendlyName=function(e){return o(e)?e.substr(s.length):i(e)?e.substr(r.length):e},t.UtilsRef.getRefNameFromBranchName=function(e){return s+e},t.UtilsRef.getRefNameFromTagName=function(e){return r+e},t.UtilsRef.isBranch=o,t.UtilsRef.isTag=i,t.UtilsRef.getVersionFromBranchName=function(e){return"GB"+e},t.UtilsRef.getVersionFromTagName=function(e){return"GT"+e},t.UtilsRef.getVersionFromCommitHash=function(e){return"GC"+e},t.UtilsRef.getShortCommitId=function(e){return e.substring(0,8)}}(),function(e){var s;P=t.GitRefFavoritesService={},Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.artifactType="Microsoft.TeamFoundation.Git.GitRefFavorite",e.artifactScopeType="Repository"}(s=t.GitRefFavoritesService.GitRefFavoriteArtifactConstants||(t.GitRefFavoritesService.GitRefFavoriteArtifactConstants={}));class r extends p.ObservableArray{dispose(){}}function o(e){return{id:e.id.toString(),artifactId:e.name,artifactName:V.getFriendlyName(e.name),artifactScope:{id:e.repositoryId,type:s.artifactScopeType},artifactType:s.artifactType}}t.GitRefFavoritesService.GitRefFavoritesService=class{constructor(e,t,s){this.gitRestClient=e,this.canFavorites=t,this.projectId=s,this._favoritesCollection=new r([])}canUseFavorites(){return this.canFavorites}canFetchExtendedDetails(){return!1}async getFavorites(e,t,i){if(e!==s.artifactType)throw new Error(`Type ${e} not valid. GitRefFavoritesService only supports ${s.artifactType}.`);if(t!==s.artifactScopeType)throw new Error(`Scope ${t} not valid. GitRefFavoritesService only supports ${s.artifactScopeType}.`);return this._favoritesPromise||(this._favoritesPromise=this.gitRestClient.getRefFavorites(this.projectId,i)),this._favoritesPromise.then(e=>(this._favoritesCollection=new r(e.filter(e=>2===e.type).map(o)),this._favoritesCollection))}getCurrentFolderFavorites(){if(!this._favoritesPromise)throw new Error("Favorites not loading yet.");return this._favoritesPromise.then(e=>e.filter(e=>1===e.type).map(e=>e.name))}async addFavorite(e){this._favoritesCollection.push(e);const t=await this.gitRestClient.createFavorite(function(e){return{id:e.id&&parseInt(e.id),name:e.artifactId,repositoryId:e.artifactScope.id,type:2}}(e),this.projectId);return e.id=t.id.toString(),e}async removeFavorite(e){this._favoritesCollection.removeAll(t=>t.id===e.id),await this.gitRestClient.deleteRefFavorite(this.projectId,parseInt(e.id))}}}(),function(e){j=t.GitRefService={},Object.defineProperty(t,"__esModule",{value:!0});class s extends Array{constructor(e,t){"number"==typeof e?super(e):(super(...e),this.continuationToken=t)}}t.GitRefService.PagedList=s;const o=void 0,i=200;class a extends r.VssService{constructor(){super(...arguments),this.myBranchesByRepository={},this.branchesByRepository={},this.tagsByRepository={},this.refsByArea={heads:this.branchesByRepository,tags:this.tagsByRepository},this.branchesChangedListeners=[],this.tagsChangedListeners=[],this.searchBranches=((e,t,s,r)=>this.searchPagedRefs(e,t,s,"heads",r)),this.searchTags=((e,t,s,r)=>this.searchPagedRefs(e,t,s,"tags",r))}getMyBranches(e,t){return this.myBranchesByRepository[e]||(this.myBranchesByRepository[e]=this.getGitClient().getRefs(e,t,void 0,!1,!1,!0).then(p)),this.myBranchesByRepository[e]}getPagedBranches(e,t){return this.getPagedRefs(e,t,"heads")}getMoreBranches(e,t,s){return this.getMoreRefs(e,t,s,"heads")}getPagedTags(e,t){return this.getPagedRefs(e,t,"tags")}getMoreTags(e,t,s){return this.getMoreRefs(e,t,s,"tags")}invalidateBranchesCache(e){delete this.myBranchesByRepository[e],delete this.branchesByRepository[e];for(const e of this.branchesChangedListeners)e()}registerBranchesChangedListener(e){this.branchesChangedListeners.push(e)}unregisterBranchesChangedListener(e){const t=this.branchesChangedListeners.indexOf(e);t>=0&&this.branchesChangedListeners.slice(t,1)}invalidateTagsCache(e){delete this.tagsByRepository[e];for(const e of this.tagsChangedListeners)e()}registerTagsChangedListener(e){this.tagsChangedListeners.push(e)}unregisterTagsChangedListener(e){const t=this.tagsChangedListeners.indexOf(e);t>=0&&this.tagsChangedListeners.slice(t,1)}async getPagedRefs(e,t,s){let r=this.getCachedRefs(s,e);if(!r){r=this.getRefPaginatedClient().getPaginatedRefs(e,t,s,o,i),this.cacheRefs(s,e,r)}return r}async getMoreRefs(e,t,r,a){const n=this.getCachedRefs(a,e);if(!n)return this.getPagedRefs(e,t,a);const p=await n;if(!p.continuationToken||p.continuationToken!==r)return p;const c=this.getRefPaginatedClient().getPaginatedRefs(e,t,a,o,i,p.continuationToken).then(e=>new s([...p,...e],e.continuationToken));return this.cacheRefs(a,e,c),c}async searchPagedRefs(e,t,r,o,a){const n=this.getCachedRefs(o,e);if(n){const e=await n;if(!e.continuationToken){const t=e.filter(e=>-1!==e.name.toLowerCase().indexOf(r.toLowerCase()));return new s(t)}}return this.getRefPaginatedClient().getPaginatedRefs(e,t,o,r,i,a)}getRefPaginatedClient(){return this.pageContext.getRestClient("IPaginatedGitRefRestClient")}getGitClient(){return this.pageContext.getRestClient("IGitRestClient")}getCachedRefs(e,t){return this.refsByArea[e][t]}cacheRefs(e,t,s){this.refsByArea[e][t]=s}}t.GitRefService.GitRefService=a,r.Services.add("IGitRefService",{serviceFactory:a,options:2});class n extends c.RestClientBase{async getPaginatedRefs(e,t,r,o,i,a){const n={filter:r,filterContains:o,$top:i,continuationToken:a};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:t,repositoryId:e},queryParams:n,returnRawResponse:!0}).then(async e=>new s(await e.text().then(u.deserializeVssJsonObject),function(e){return e.headers.get("x-ms-continuationtoken")||void 0}(e)))}}function p(e){return e.filter(e=>V.isBranch(e.name))}t.GitRefService.PaginatedGitRefRestClient=n;r.RestClients.add("IPaginatedGitRefRestClient",{factory:n,options:{serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}(),function(e){t.GitRepositoryService={},Object.defineProperty(t,"__esModule",{value:!0});r.Services.add("IGitRepositoryService",{serviceFactory:class extends r.VssService{constructor(){super(...arguments),this.repositoriesByProject={}}getAllRepositories(e){let t=this.repositoriesByProject[e||""];return t||(t=this.pageContext.getRestClient("IGitRestClient").getRepositories(e),this.repositoriesByProject[e||""]=t),t}getRepositoryById(e,t){return this.pageContext.getRestClient("IGitRestClient").getRepository(e,t)}}})}(),function(e){t.MenuProvider={},Object.defineProperty(t,"__esModule",{value:!0});r.Services.add("code-hub-group-menu-provider",{serviceFactory:class extends r.VssService{loadItems(e){const t=this.pageContext.getService("IVCNavigationService"),s=t.getData();if(s){const r=this.pageContext.getService("ITfsPageService").getData(),o=r&&r.project?r.project.name:"",i=s.defaultRepoIsGit?s.defaultGitRepoName:"$/"+o,a=s.defaultRepoIsGit?"git":"tfvc-repo";e([{key:"vcRepoItem",className:"repo-menu-item",groupKey:"navigation",href:s.defaultRepoIsGit?s.defaultGitRepoUrl:t.getRepositoryUrl(null),name:i,iconProps:{iconName:"",className:"bowtie-icon bowtie-"+a},rank:50}])}}}})}(),function(e){t.MruRouteService={},Object.defineProperty(t,"__esModule",{value:!0});r.Services.add("vc-mru-route-service",{serviceFactory:class extends r.VssService{constructor(){super(...arguments),this.id="vc-mru-route-service"}routeUrl(e,t){const s=this.pageContext.getService("IVssLocationService"),r=this.pageContext.getService("IVssContributionService").getData("ms.vss-code-web.versioncontrol-viewmodel-data-provider");return r&&(r.gitRepository?e.vcType="git":r.projectVersionControlInfo&&r.projectVersionControlInfo.supportsTFVC&&(e.vcType="tfvc")),s.routeUrl("ms.vss-code-web.code-redirect",e,t)}}})}(),function(e){S=t.UtilsSearch={},Object.defineProperty(t,"__esModule",{value:!0}),t.UtilsSearch.debouncePromiseFunction=function(e,t,s){let r,o;return function(...i){return r&&(clearTimeout(r),o&&o(s),o=void 0,r=void 0),new Promise(s=>{o=s,r=setTimeout(()=>{o=void 0,r=void 0,s(e.apply(null,i))},t)})}},t.UtilsSearch.reuseIfStrictlyStronger=function(e,t,s){let r,o;return(i,a)=>{const n=()=>(r=i,o=e(i,a));return function(e,t){return Boolean(e&&t&&e.toLowerCase().indexOf(t.toLowerCase())>=0)}(i,r)?o.then(e=>e&&s(e)?t(i,e):n()).catch(n):n()}},t.UtilsSearch.createValidator=function(e,t){return async(s,r)=>(await t(s),await e(s,r))},t.UtilsSearch.composeSearchByPivot=function(e,t){return(s,r,o)=>e[r||t](s,o)}}(),function(e){w=t.UtilsTelemetry={},Object.defineProperty(t,"__esModule",{value:!0}),t.UtilsTelemetry.startTelemetryTimer=function(e,t){const s=Date.now();return{publishTime:function(r,o){e.getService("IVssTelemetryService").publishEvent(b.VersionControlArea,t,Object.assign({action:r,elapsedMs:Date.now()-s},o))}}}}(),function(e){_=t.ProvidersVersionDropdownProvider={},Object.defineProperty(t,"__esModule",{value:!0});const s=4,r=10,o=/^[0-9a-f]+$/i,i="VersionDropdownProvider",a="!";function n({viewMyBranches:e,viewTagsPivot:t,viewCommitsPivot:s},r){return[{key:"default",name:void 0,pivotId:"branches"},e&&{key:"favorites",name:C.VersionDropdown_MineBranches,pivotId:"branches"},{key:"all-branches",name:C.VersionDropdown_AllBranches,pivotId:"branches",isLoading:r["all-branches"]},t&&{key:"all-tags",name:void 0,pivotId:"tags",isLoading:r["all-tags"]},s&&{key:"found-commits",name:void 0,pivotId:"commits"}].filter(Boolean)}function p(e,t,s,r){const o=V.getFriendlyName(e.name),i=V.isTag(e.name);return{refName:e.name,friendlyName:o,versionString:i?V.getVersionFromTagName(o):V.getVersionFromBranchName(o),kind:i?"tag":"branch",isMine:e.creator&&e.creator.id===s,isDefault:e.name===t.defaultBranch,isFavoritedByFolder:!i&&c(e.name,r),repositoryId:t.id}}function c(e,t){return t.some(t=>e.startsWith(t+"/"))}function u(e,t,s){return!e||e.length>=s?e:e+Array(s-e.length+1).join(t)}function d(e,t){if(!e)return;const s="GT"===e.substring(0,2),r="GC"===e.substring(0,2);let o=e.substring(2);r&&(o=V.getShortCommitId(o));const i=V.getFriendlyName(t.defaultBranch);return{refName:s?V.getRefNameFromTagName(o):V.getRefNameFromBranchName(o),friendlyName:o,versionString:e,kind:r?"commit":s?"tag":"branch",isDefault:o===i,repositoryId:t.id}}function m(e){if("branch"===e.kind&&!e.isDefault&&!e.isMine)return{artifactId:e.refName,artifactName:e.friendlyName,artifactScope:{id:e.repositoryId,type:P.GitRefFavoriteArtifactConstants.artifactScopeType},artifactType:P.GitRefFavoriteArtifactConstants.artifactType}}function h(e){return"commit"===e.kind?"found-commits":"tag"===e.kind?"all-tags":e.isDefault?"default":e.isMine||e.isFavoritedByFolder?"favorites":"all-branches"}function g(e,t){return e.friendlyName.localeCompare(t.friendlyName)}function y(e){if(!e||e.length<s)throw new Error(C.VersionDropdown_CommitsSearchMinimumCharactersError);if(!o.test(e))throw new Error(C.VersionDropdown_CommitsSearchWrongCharactersError)}function R(e,t){return t.filter(t=>t.refName.startsWith(e))}function I(e,t){return t.filter(t=>-1!==t.friendlyName.toLowerCase().indexOf(e.toLowerCase()))}function v(e){return e.length<=r}function f(e){return!e.continuationToken}function q(e,t,s){return-1!==("commit"===s.kind?s.refName:t.name).toLowerCase().indexOf(e.toLowerCase())}t.ProvidersVersionDropdownProvider.VersionDropdownProvider=class extends l.ArtifactPickerProviderBase{constructor(e,t){super(),this.pageContext=e,this.options=t,this._continuationTokens={},this.minItemsForSearchBox=0,this.selectExactMatchOnEnter=!0,this.getPickListItems=(async e=>{if(!e)return[];const t=w.startTelemetryTimer(this.pageContext,i),s=await this.getRefs(e);if(this._continuationTokens[e]=s.continuationToken,!s.continuationToken){const t=this.getGroupsLoadingState();t[e]&&(t[e]=!1,this._artifactPickerOptions.groups=n(this.options,t))}const r=this.options.viewMyBranches?await this._gitRefFavoritesService.getCurrentFolderFavorites():[],o=s.map(e=>p(e,this.options.repository,this.options.currentIdentityId,r));return this.selectedItem&&"commit"===this.selectedItem.kind&&o.push(this.selectedItem),t.publishTime("getPickListItems",{groupKey:e,count:o.length,hasMore:Boolean(s.continuationToken)}),o}),this.searchCommits=(async e=>{const t=w.startTelemetryTimer(this.pageContext,i),s=this.pageContext.getRestClient("IGitRestClient"),{id:o,project:{id:a}}=this.options.repository,n=(await s.getCommitsBatch({fromCommitId:u(e,"0",40),toCommitId:u(e,"F",40)},o,a,0,r+1)).map(e=>(function(e,t){return{refName:e.commitId,friendlyName:V.getShortCommitId(e.commitId)+" "+e.comment,versionString:V.getVersionFromCommitHash(e.commitId),kind:"commit",repositoryId:t.id}})(e,this.options.repository));return t.publishTime("searchCommits",{count:n.length}),n}),this.searchBranchRefs=((e,t)=>this.searchRefs(e,t,"all-branches",this.getGitRefService().searchBranches)),this.searchTagRefs=((e,t)=>this.searchRefs(e,t,"all-tags",this.getGitRefService().searchTags));const s={artifactType:P.GitRefFavoriteArtifactConstants.artifactType,artifactScope:{id:t.repository.id,name:t.repository.name,type:P.GitRefFavoriteArtifactConstants.artifactScopeType}},o={branch:"OpenSource",tag:"Tag",commit:"BranchCommit"};let a,c=function(e){const t=e&&e.viewClearButton?()=>e.onVersionSelected&&e.onVersionSelected(null):void 0;return[{id:"branches",name:C.VersionDropdown_PivotBranches,getActions:()=>(function(e,t,s){const r=[];return e&&r.push({name:C.VersionDropdown_NewBranch,iconProps:{iconName:"Add"},onClick:()=>e()}),t&&r.push({name:C.VersionDropdown_ClearSelection,iconProps:{iconName:"Cancel"},disabled:s,onClick:t}),r})(e.onCreateBranchClick,t,!e.selectedVersionString),searchTextPlaceholder:C.VersionDropdown_BranchesSearchTextPlaceholder,searchNoResultsText:C.VersionDropdown_BranchesSearchNoResultsText},e.viewTagsPivot&&{id:"tags",name:C.VersionDropdown_PivotTags,searchTextPlaceholder:C.VersionDropdown_TagsSearchTextPlaceholder,searchNoResultsText:C.VersionDropdown_TagsSearchNoResultsText,noItemsText:C.VersionDropdown_TagsNoItemsText},e.viewCommitsPivot&&{id:"commits",name:C.VersionDropdown_PivotCommits,searchTextPlaceholder:C.VersionDropdown_CommitsSearchTextPlaceholder,searchNoResultsText:C.VersionDropdown_CommitsSearchNoResultsText,noItemsText:C.VersionDropdown_CommitsSearchMinimumCharactersError}].filter(Boolean)}(t),l=void 0;if(c&&1===c.length){const e=c[0].getActions;a=e&&e([]),l=c[0].searchTextPlaceholder,c=void 0}const{id:y}=t.repository.project;this._gitRefFavoritesService=this.getGitRefFavoritesService(y,t.viewMyBranches),this._artifactPickerOptions={pageContext:e,favoritesContext:s,favoritesService:this._gitRefFavoritesService,onArtifactClicked:e=>t.onVersionSelected&&t.onVersionSelected(e.versionString),selectedArtifact:d(t.selectedVersionString,t.repository),hideFavoriteSelectedItemIndicator:!0,getArtifacts:this.getPickListItems,getArtifactId:e=>e.refName,getArtifactName:e=>e.friendlyName,getArtifactIcon:e=>({iconType:0,iconName:o[e.kind]}),getFavoriteFromArtifact:m,getArtifactListGroupId:h,artifactComparer:g,groups:n(t,{"all-branches":!0,"all-tags":!0}),pivots:c,searchTextPlaceholder:l,otherActions:a,limitSearchToPivot:!0,getSearchResults:this.createSearchFunction(),getSearchResultsContinuationToken:e=>e.continuationToken,onFilterItemByText:q},this.initialize(this._artifactPickerOptions),this.getGitRefService().registerBranchesChangedListener(this.forgetCachedArtifacts)}dispose(){super.dispose(),this.getGitRefService().unregisterBranchesChangedListener(this.forgetCachedArtifacts)}getRefs(e){const t=this._continuationTokens[e],{id:s,project:{id:r}}=this.options.repository;return t?"all-tags"===e?this.getGitRefService().getMoreTags(s,r,t):this.getGitRefService().getMoreBranches(s,r,t):"all-tags"===e?this.getGitRefService().getPagedTags(s,r):this.options.viewMyBranches?this.getMyBranches():this.getGitRefService().getPagedBranches(s,r)}getMyBranches(){const{id:e,project:{id:t}}=this.options.repository;return this.getGitRefService().getMyBranches(e,t).then(e=>new j.PagedList(e,a))}getGitRefFavoritesService(e,t){const s=this.pageContext.getService("IFavoritesService"),r=this.pageContext.getRestClient("IGitRestClient");return new P.GitRefFavoritesService(r,t&&s.canUseFavorites(),e)}getGitRefService(){return this.pageContext.getService("IGitRefService")}createSearchFunction(){const e=e=>S.debouncePromiseFunction(e,1e3,[]),t=e=>(t,s)=>e(t&&t.trim(),s),s=e=>S.reuseIfStrictlyStronger(e,I,f);return S.composeSearchByPivot({branches:(e=>(t,s)=>this.isGroupFullyLoaded("all-branches")?Promise.resolve(void 0):e(t,s))(t(s(e(this.searchBranchRefs)))),tags:(e=>(t,s)=>this.isGroupFullyLoaded("all-tags")?Promise.resolve(void 0):e(t,s))(t(s(e(this.searchTagRefs)))),commits:t((e=>S.createValidator(e,y))((e=>S.reuseIfStrictlyStronger(e,R,v))(e(this.searchCommits))))},"branches")}async searchRefs(e,t,s,r){const o=w.startTelemetryTimer(this.pageContext,i);t||(t=this._continuationTokens[s]);const{id:a,project:{id:n}}=this.options.repository,c=await r(a,n,e,t),u=c.map(e=>p(e,this.options.repository,this.options.currentIdentityId,[]));return o.publishTime("searchRefs",{count:u.length,hasMore:Boolean(c.continuationToken)}),new j.PagedList(u,c.continuationToken)}getGroupsLoadingState(){return this._artifactPickerOptions&&this._artifactPickerOptions.groups?this._artifactPickerOptions.groups.reduce((e,t)=>Object.assign({},e,{[t.key]:t.isLoading}),{}):{}}isGroupFullyLoaded(e){return!this.getGroupsLoadingState()[e]}}}(),function(e){k=t.RepositoryPickerProvider={},Object.defineProperty(t,"__esModule",{value:!0});const s="Microsoft.TeamFoundation.Git.Repository",r="RepositoryPickerProvider";function o(e){return{name:e.name,id:e.id,repository:e,isFork:e.isFork,isTfvc:!1}}t.RepositoryPickerProvider.RepositoryPickerProvider=class extends l.ArtifactPickerProviderBase{constructor(e,t){super(),this.minItemsForSearchBox=0,this.getPickListItems=(()=>{if(!this.itemsPromise){const e=w.startTelemetryTimer(this.pageContext,r),t=this.pageContext.getService("IGitRepositoryService");this.itemsPromise=t.getAllRepositories(this.projectId).then(t=>{const s=t.map(o);return s.sort((e,t)=>d.localeIgnoreCaseComparer(e.name,t.name)),this.supportsTfvc&&s.unshift({name:"$/"+this.projectName,isTfvc:!0,id:"tfvc",isFork:!1}),e.publishTime("getAllRepositories"),s})}return this.itemsPromise}),this.onSelectedItemChanged=(e=>{this.setSelectedItem(e);const{onArtifactClicked:t,getArtifactHref:s}=this.artifactPickerOptions;return t?t(e):s?a.onClickFPS(this.pageContext,s(e),!0,void 0,{telemetrySource:r}):void 0});const{actions:i,getItemHref:n,getRepositories:p,onRepositorySelected:c,selectedRepositoryIsTfvc:u,selectedRepositoryIsFork:l,selectedRepositoryId:m,selectedRepositoryName:h,supportsTfvc:g,projectName:y,projectId:R,defaultGroupHeader:I,favoriteGroupHeader:v,showFavoritesEarly:f=!0}=t;let q,b;this.pageContext=e,this.projectId=R,this.projectName=y,this.supportsTfvc=g,p&&(this.itemsPromise=p().then(e=>e.map(o))),u?q={name:"$/"+y,isTfvc:!0,id:"tfvc",isFork:!1}:h&&(q={name:h,isTfvc:!1,id:m||h,isFork:!!l}),b=y&&R?{artifactType:s,artifactScope:{id:R,name:y,type:"Project"}}:{artifactType:s,artifactScope:{id:"",name:"",type:"Collection"}},this.artifactPickerOptions={pageContext:e,favoritesContext:b,onArtifactClicked:c,selectedArtifact:q,defaultGroupHeader:I,favoriteGroupHeader:v,hideFavoriteSelectedItemIndicator:!0,getArtifacts:this.getPickListItems,getArtifactId:e=>e.id,getArtifactName:e=>e.name,getArtifactHref:n,getArtifactIcon:e=>({iconType:1,iconName:e.isTfvc?"tfvc-repo":e.isFork?"git-fork":"git"}),getArtifactFromFavorite:f?e=>({name:e.artifactName,id:e.artifactId,isTfvc:!1,isFork:!1}):void 0,getFavoriteFromArtifact:e=>e.repository?{artifactId:e.repository.id,artifactName:e.repository.name,artifactScope:{id:e.repository.project.id,name:e.repository.project.name,type:"Project"},artifactType:s}:void 0,artifactComparer:(e,t)=>e.name.localeCompare(t.name),otherActions:i,searchTextPlaceholder:C.SearchRepositoriesWatermark},this.initialize(this.artifactPickerOptions)}async _loadFavorites(e=!1){const t=w.startTelemetryTimer(this.pageContext,r),s=await super._loadFavorites(e);return s&&t.publishTime("loadFavorites",{includeExtendedData:e}),s}}}(),function(e){t[e]={},Object.defineProperty(t,"__esModule",{value:!0});t[e].TfvcClientName="ITfvcRestClient",t[e].getTfvcClient=function(s,r){return s.getRestClient(t[e].TfvcClientName,r)},r.RestClients.add(t[e].TfvcClientName,{factory:class extends c.RestClientBase{constructor(e){super(e)}async getBranch(e,t,s,r){const o={path:e,includeParent:s,includeChildren:r};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/Branches/{*path}",routeValues:{project:t},queryParams:o})}async getBranches(e,t,s,r,o){const i={includeParent:t,includeChildren:s,includeDeleted:r,includeLinks:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/Branches/{*path}",routeValues:{project:e},queryParams:i})}async getBranchRefs(e,t,s,r){const o={scopePath:e,includeDeleted:s,includeLinks:r};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/Branches/{*path}",routeValues:{project:t},queryParams:o})}async getChangesetChanges(e,t,s){const r={$skip:t,$top:s};return this.beginRequest({apiVersion:"5.0",routeTemplate:"_apis/tfvc/changesets/{id}/changes",routeValues:{id:e},queryParams:r})}async createChangeset(e,t){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/tfvc/changesets/{id}",routeValues:{project:t},body:e})}async getChangeset(e,t,s,r,o,i,a,n,p,c,u){const l={maxChangeCount:s,includeDetails:r,includeWorkItems:o,maxCommentLength:i,includeSourceRename:a,$skip:n,$top:p,$orderby:c,searchCriteria:u};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/changesets/{id}",routeValues:{project:t,id:e},queryParams:l})}async getChangesets(e,t,s,r,o,i){const a={maxCommentLength:t,$skip:s,$top:r,$orderby:o,searchCriteria:i};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/changesets/{id}",routeValues:{project:e},queryParams:a})}async getBatchedChangesets(e){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"_apis/tfvc/ChangesetsBatch",body:e})}async getChangesetWorkItems(e){return this.beginRequest({apiVersion:"5.0",routeTemplate:"_apis/tfvc/changesets/{id}/workItems",routeValues:{id:e}})}async getItemsBatch(e,t){return this.beginRequest({apiVersion:"5.0",method:"POST",routeTemplate:"{project}/_apis/tfvc/ItemBatch",routeValues:{project:t},body:e})}async getItemsBatchZip(e,t){return this.beginRequest({apiVersion:"5.0",method:"POST",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/tfvc/ItemBatch",routeValues:{project:t},body:e})}async getItem(e,t,s,r,o,i,a,n){const p={path:e,fileName:s,download:r,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getItemContent(e,t,s,r,o,i,a,n){const p={path:e,fileName:s,download:r,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getItems(e,t,s,r,o){const i={scopePath:t,recursionLevel:s,includeLinks:r,versionDescriptor:o};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:e},queryParams:i})}async getItemText(e,t,s,r,o,i,a,n){const p={path:e,fileName:s,download:r,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0",httpResponseType:"text/plain",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getItemZip(e,t,s,r,o,i,a,n){const p={path:e,fileName:s,download:r,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getLabelItems(e,t,s){const r={$top:t,$skip:s};return this.beginRequest({apiVersion:"5.0",routeTemplate:"_apis/tfvc/labels/{labelId}/items",routeValues:{labelId:e},queryParams:r})}async getLabel(e,t,s){const r={requestData:t};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/Labels/{labelId}",routeValues:{project:s,labelId:e},queryParams:r})}async getLabels(e,t,s,r){const o={requestData:e,$top:s,$skip:r};return this.beginRequest({apiVersion:"5.0",routeTemplate:"{project}/_apis/tfvc/Labels/{labelId}",routeValues:{project:t},queryParams:o})}async getShelvesetChanges(e,t,s){const r={shelvesetId:e,$top:t,$skip:s};return this.beginRequest({apiVersion:"5.0",routeTemplate:"_apis/tfvc/shelvesets/changes",queryParams:r})}async getShelveset(e,t){const s={shelvesetId:e,requestData:t};return this.beginRequest({apiVersion:"5.0",routeTemplate:"_apis/tfvc/shelvesets",queryParams:s})}async getShelvesets(e,t,s){const r={requestData:e,$top:t,$skip:s};return this.beginRequest({apiVersion:"5.0",routeTemplate:"_apis/tfvc/shelvesets",queryParams:r})}async getShelvesetWorkItems(e){const t={shelvesetId:e};return this.beginRequest({apiVersion:"5.0",routeTemplate:"_apis/tfvc/shelvesets/workitems",queryParams:t})}async getTfvcStatistics(e,t){const s={scopePath:t};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/stats",routeValues:{project:e},queryParams:s})}},options:{resourceAreaId:"8aa40520-446d-40e6-89f6-9c9f9ce44c48",serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}("RestClientTfvc"),function(e){t.UtilsDate={},Object.defineProperty(t,"__esModule",{value:!0}),t.UtilsDate.isDateRecent=function(e){if(!e)return!1;const t=new Date;return Math.abs(t.getTime()-e.getTime())/36e5<24},t.UtilsDate.getDateString=function(e,t,s=!1){return e?t?m.ago(e):s?e.toLocaleDateString():e.toLocaleString():""}}(),function(e){x=t.ComponentsRepositoryDropdown={},Object.defineProperty(t,"__esModule",{value:!0});t.ComponentsRepositoryDropdown.RepositoryDropdownComponent=class extends g.VssComponent{constructor(e,t){super(e,t),this.itemPicker=i.createRef(),this.pickerProvider=new k.RepositoryPickerProvider(t.pageContext,e.providerOptions)}render(){const{className:e,tabIndex:t,hideSelectedItemIcon:s,dropdownIconProps:r,isOpen:o,onToggleDropdown:a,ariaDescribedBy:n,onFocus:p,onFocusLost:c}=this.props;return i.createElement(y.ItemPickerDropdown,{ref:this.itemPicker,id:this.props.id,provider:this.pickerProvider,className:h.css("repository-selector",e),tabIndex:t,pickListClassName:"repository-selector-dropdown",hideSelectedItemIcon:s,dropdownIconProps:r,ariaDescribedBy:n,isOpen:o,onToggleDropdown:a,onFocus:p,onFocusLost:c})}componentDidMount(){super.componentDidMount(),this.props.componentRef&&this.props.componentRef(this)}componentWillReceiveProps(e){e.providerOptions!==this.props.providerOptions&&(this.pickerProvider=new k.RepositoryPickerProvider(this.context.pageContext,e.providerOptions))}focus(){this.itemPicker.current&&this.itemPicker.current.focus()}}}(),function(e){t.ComponentsCommandBarRepositorySelector={},Object.defineProperty(t,"__esModule",{value:!0});const s="ms.vss-code-web.command-bar-repository-picker-actions";g.Components.add("navigation-repository-selector",class extends g.VssComponent{constructor(e,t){super(e,t),this.repositoryDropdown=i.createRef(),this.expand=((e,t,s)=>{this.props.expand&&this.props.expand(e,t,s)}),this.onToggleDropdown=(e=>{this.props.expand&&this.props.itemKey&&this.props.expand(this.props.itemKey,e)}),this.getActions=(()=>{const e=[];if(this.canCreateRepositories&&(e.push({name:C.NewRepository,iconProps:{iconName:"Add"},onClick:()=>{this.context.pageContext.getService("IVssLayoutManager").renderCallout(e=>i.createElement(n.LegacyComponent,{modules:["VersionControl/Scripts/Components/HeaderComponents/HeaderComponents"],wrappedType:"newRepositoryDialog",onClose:()=>{e()},isOverviewHubEnabled:T.FeatureFlags.isRepositoryOverviewHubEnabled(this.context.pageContext)},null))}}),e.push({name:C.ImportRepository,iconProps:{iconName:"Upload"},onClick:()=>{this.context.pageContext.getService("IVssLayoutManager").renderCallout(e=>i.createElement(n.LegacyComponent,{modules:["VersionControl/Scripts/Components/HeaderComponents/HeaderComponents"],wrappedType:"importRepositoryDialog",onClose:()=>{e()}},null))}})),this.canManageRepositories){const t=o.routeUrl(this.context.pageContext,"ms.vss-code-web.admin-version-control-route",{project:this.projectName});e.push({name:C.ManageRepositories,iconProps:{iconName:"Settings"},href:t})}return e}),this.menuItemsToPickListActions=(e=>{const t=[];return e.forEach(e=>{t.push({name:e.text||"",iconProps:e.iconProps,onClick:e.onActivate,href:e.href})}),t}),this.getItemHref=(e=>this.context.pageContext.getService("IVCNavigationService").getRepositoryUrl(e.isTfvc?null:e.name)),this.initializeData(e,t),this.state={selected:!1}}render(){return this.vcData&&this.projectName?i.createElement(I.CommandBarExpandableComponent,Object.assign({},this.props,{calloutId:this.props.expanded?"dropdown"+this.componentId:void 0,className:g.css("commandbar-item-menu",this.props.className),expandOnHover:!1,id:"cmec"+this.componentId,noTabIndex:!0,expand:this.expand}),i.createElement(v.Observer,{contributedActions:this.repositoryContributedActions},e=>i.createElement(x.RepositoryDropdownComponent,{ref:this.repositoryDropdown,className:"command-bar-repository-selector",id:"dropdown"+this.componentId,tabIndex:this.props.selected?0:-1,onFocus:this.props.onFocus,onFocusLost:this.props.onFocusLost,hideSelectedItemIcon:this.props.hideIcon,dropdownIconProps:this.props.useSmallDropdownIcon?{iconName:"ChevronDownSmall"}:void 0,providerOptions:{actions:[...this.repositoryActions,...this.menuItemsToPickListActions(e.contributedActions)],getItemHref:this.getItemHref,projectName:this.projectName,projectId:this.projectId,selectedRepositoryId:this.vcData&&this.vcData.defaultRepoId||"tfvc",selectedRepositoryName:this.vcData&&this.vcData.defaultGitRepoName,selectedRepositoryIsTfvc:this.vcData&&!this.vcData.defaultRepoIsGit,selectedRepositoryIsFork:this.vcData&&this.vcData.defaultRepoIsFork,supportsTfvc:this.vcData&&this.vcData.supportsTfvc},isOpen:this.props.expanded,onToggleDropdown:this.onToggleDropdown}))):null}componentDidUpdate(e){!e.selected&&this.props.selected&&this.repositoryDropdown.current&&this.repositoryDropdown.current.focus()}initializeData(e,t){const r=t.pageContext.getService("IVCNavigationService");this.vcData=r.getData();const o=t.pageContext.getService("ITfsPageService").getData();if(o&&o.project){this.projectName=o.project.name,this.projectId=o.project.id;const e=t.pageContext.getService("IVssSecurityService"),s=`repoV2/${this.projectId}/`;this.canCreateRepositories=e.hasPermission(b.GitConstants.GitSecurityNamespaceId,s,256),this.canManageRepositories=e.hasPermission(b.GitConstants.GitSecurityNamespaceId,s,1024)||e.hasPermission(b.GitConstants.GitSecurityNamespaceId,s,512)||e.hasPermission(b.GitConstants.GitSecurityNamespaceId,s,8192),this.favoritesContext={artifactType:"Microsoft.TeamFoundation.Git.Repository",artifactScope:{id:o.project.id,name:o.project.name,type:"Project"}}}else this.projectName=void 0,this.projectId=void 0,this.favoritesContext=void 0;this.repositoryActions=this.getActions(),this.repositoryContributedActions=R.getMenuItems(this.context.pageContext,s)}hasFocus(e){return!1}})}(),function(e){t.ComponentsHeaderComponents={},Object.defineProperty(t,"__esModule",{value:!0});class s extends g.VssComponent{render(){return i.createElement(I.CommandBarChildComponent,Object.assign({},this.props,{noTabIndex:!0}),i.createElement(n.LegacyComponent,{key:this.props.wrappedComponentType,wrappedType:this.props.wrappedComponentType,modules:["VersionControl/Scripts/Components/HeaderComponents/HeaderComponents"],selected:this.props.selected}))}}s.componentType="versionControlActionHeader",g.VssComponent.register(s.componentType,s)}(),function(e){t.ComponentsRepositoryList={},Object.defineProperty(t,"__esModule",{value:!0});t.ComponentsRepositoryList.RepositoryListComponent=class extends g.VssComponent{constructor(e,t){super(e,t),this.pickerProvider=new k.RepositoryPickerProvider(t.pageContext,e.providerOptions)}render(){const{className:e,useDropdownStyle:t}=this.props;return i.createElement(y.ItemPickList,{provider:this.pickerProvider,className:h.css("repository-list",e)})}componentDidMount(){super.componentDidMount(),this.props.componentRef&&this.props.componentRef(this)}componentWillReceiveProps(e){e.providerOptions!==this.props.providerOptions&&(this.pickerProvider=new k.RepositoryPickerProvider(this.context.pageContext,e.providerOptions))}}}(),function(e){N=t.ComponentsVersionDropdown={},Object.defineProperty(t,"__esModule",{value:!0});function s(e,t){const{prefix:s,lastName:r}="commit"===t.kind?{lastName:e.name}:function(e){const t=e.lastIndexOf("/");return t>0?{prefix:e.substring(0,t+1),lastName:e.substring(t+1)}:{lastName:e}}(e.name);return i.createElement("span",null,s&&i.createElement("span",{className:"prefix-name"},s),r,t.isDefault&&i.createElement("span",{className:"default-badge"},C.VersionDropdown_DefaultBadge))}t.ComponentsVersionDropdown.VersionDropdown=class extends g.VssComponent{constructor(e,t){super(e,t),this.provider=new _.VersionDropdownProvider(t.pageContext,e.providerOptions)}render(){const{className:e,dropdownClassName:t,id:r,tabIndex:o,hideSelectedItemIcon:a,dropdownIconProps:n,isOpen:p,autoFocus:c,isDrodownFullWidth:u,placeholderText:l,onToggleDropdown:d,titleTooltipFormat:m}=this.props;return i.createElement(y.ItemPickerDropdown,{id:r,provider:this.provider,className:h.css("version-selector",e),tabIndex:o,pickListClassName:h.css("version-selector-dropdown",t),hideSelectedItemIcon:a,dropdownIconProps:n,pickListWidth:u?void 0:350,isOpen:p,autoFocus:c,placeholderText:l,onRenderItemText:s,onToggleDropdown:d,titleTooltipFormat:m})}componentDidMount(){super.componentDidMount(),this.props.componentRef&&this.props.componentRef(this)}componentWillReceiveProps(e){f.shallowCompare(e.providerOptions,this.props.providerOptions)||(this.provider=new _.VersionDropdownProvider(this.context.pageContext,e.providerOptions))}}}(),function(e){t.ComponentsVersionDropdownAsync={},Object.defineProperty(t,"__esModule",{value:!0});class s extends g.VssComponent{constructor(e,t){super(e,t),this.state={}}componentDidMount(){super.componentDidMount(),this.state.gitRepository||this._fetchGitRepository()}render(){const e=Object.assign({},this.props.versionDropdownProps.providerOptions,{repository:this.state.gitRepository||{}}),t=Object.assign({},this.props.versionDropdownProps,{providerOptions:e});return i.createElement(i.Fragment,null,this.state.gitRepository?i.createElement(N.VersionDropdown,Object.assign({},t)):i.createElement(q.Spinner,null))}_fetchGitRepository(){this.context.pageContext.getService("IGitRepositoryService").getRepositoryById(this.props.repositoryId,this.props.projectId).then(e=>{this.setState({gitRepository:e})})}}t.ComponentsVersionDropdownAsync.VersionDropdownAsync=s,g.Components.add("version-dropdown-async",s)}()},["Resources","Contracts/Constants","Contracts/EnumToString","Helpers","Navigation","CreateMenuProvider","Flux/Action","Flux/Store","RestClient/Git","Utils/Ref","GitRefFavoritesService","GitRefService","GitRepositoryService","MenuProvider","MruRouteService","Utils/Search","Utils/Telemetry","Providers/VersionDropdownProvider","RepositoryPickerProvider","RestClient/Tfvc","Utils/Date","Components/RepositoryDropdown","Components/CommandBarRepositorySelector","Components/HeaderComponents","Components/RepositoryList","Components/VersionDropdown","Components/VersionDropdownAsync"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-code-web.common-content"}}));